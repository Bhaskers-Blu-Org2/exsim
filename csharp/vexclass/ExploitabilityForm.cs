// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using MSModel;

namespace vexclass
{
    public partial class ExploitabilityForm : Form
    {
        public IEnumerable<Target> Targets { get; private set; }
        private MemorySafetyModel Model { get; set; }

        public ExploitabilityForm(MemorySafetyModel model, IEnumerable<Target> targets)
        {
            this.Model = model;
            this.Targets = new List<Target>(targets);

            InitializeComponent();

            this.resultsGridView.Click += new EventHandler(resultsGridView_Click);
        }

        void resultsGridView_Click(object sender, EventArgs e)
        {
            if (this.resultsGridView.CurrentCell.RowIndex == lastRowIndex)
            {
                return;
            }

            lastRowIndex = this.resultsGridView.CurrentCell.RowIndex;

            PopulateSimulationText(this.resultsGridView.Rows[lastRowIndex].Cells[this.targetColumn.Index].Value as GlobalSimulationContext);
        }

        int lastRowIndex = -1;

        void PopulateSimulationText(GlobalSimulationContext globalContext)
        {
            ClearLog();

            AppendLog(globalContext.Description);
        }

        void ClearLog()
        {
            this.simulationLogRichText.ResetText();
        }

        void AppendLog(string str = "", params object[] p)
        {
            this.simulationLogRichText.AppendText(String.Format(str, p) + "\n");
        }


        private void ExploitabilityForm_Load(object sender, EventArgs e)
        {

        }

        private void startSimulationButton_Click(object sender, EventArgs e)
        {
#if false
            SimulationCollection simulations = new SimulationCollection(this.Model);

            Technique.AddAll(simulations);

            foreach (Target target in this.Targets)
            {
                GlobalSimulationContext globalContext = new GlobalSimulationContext(target);

                SimulationContext initialContext = new SimulationContext(globalContext);

                Simulator simulator = Simulator.CreateControlledCodeExecutionSimulator(simulations, initialContext);
                simulator.Run();

                resultsGridView.Rows.Add(new object[] {
                    globalContext,
                    target.Hardware.FullSymbol,
                    target.OperatingSystem.FullSymbol,
                    target.Application.FullSymbol,
                    target.Violation.FullSymbol,
                    globalContext.SimulationCount > 0 ? globalContext.CompletedSimulationContexts.Max(x => x.Exploitability) : 0,
                    globalContext.SimulationCount > 0 ? globalContext.CompletedSimulationContexts.Average(x => x.Exploitability) : 0,
                    globalContext.SimulationCount
                });
            }
#endif
        }
    }
}
