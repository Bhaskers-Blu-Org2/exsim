<?xml version="1.0" encoding="utf-8" ?>
<Flaws>
  <Flaw name="Memory Safety" symbol="memory_safety_flaw" guid="{2129C157-DE15-428F-954E-4561E041CAC8}">
    <HasProperty>Locality</HasProperty>
    <HasProperty>ExecutionDomain</HasProperty>
    <HasProperty>AccessRequirement</HasProperty>
    
    <Flaw name="Control Transfer" symbol="control_transfer" guid="{7E5066DD-2F92-46D2-9A55-23E3A9D6BCB4}">
      <LeadsToViolation target="x"/>
      
      <Flaw name="Arbitrary Control Transfer" symbol="arbitrary_control_transfer" guid="{6243484A-9D3A-40B0-90C3-8BD65E01541B}">
        <Example>
          <![CDATA[
        
            int (*p)() = unsafe;
          
            p();
        
          ]]>
        </Example>

      </Flaw>

      <Flaw name="Null Dereference" symbol="null_dereference" guid="{1F900694-BDC1-4044-A269-17A2AA4D2D8B}">
        <HasProperty>BaseRegion</HasProperty>
        
        <BaseRegion>Null</BaseRegion>
        
        <Flaw name="Execute Near Null" symbol="execute_near_null" guid="{73C5AEA5-541C-4998-A2F9-3144968DF77B}">
          <Example>
            <![CDATA[
        
            int (*p)() = NULL;
          
            p();
        
          ]]>
          </Example>
        </Flaw>
      </Flaw>

      <Flaw name="Boundary Violation" symbol="boundary_violation" guid="{6F5E4E1C-DF6A-4D41-B228-1F9D087584BB}">
        <HasProperty>BaseRegion</HasProperty>
        <HasProperty>Displacement</HasProperty>
        <HasProperty>AddressingMode</HasProperty>

        <AddressingMode>Relative</AddressingMode>
        
        <Flaw name="Indexed Execute" symbol="indexed_execute" guid="{818F3FA6-310E-4149-A6A7-3751A249EC22}">
          <Example>
            <![CDATA[
        
            funcptr_t p[];
          
            p[unsafe]();
        
          ]]>
          </Example>

          <Flaw name="Stack Indexed Execute" symbol="stack_indexed_execute" hidden="true" guid="{EA5A3FE7-E8AC-4BAC-BE00-75B631B925D9}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Indexed Execute" symbol="heap_indexed_execute" hidden="true" guid="{6BF1EC67-6FCF-4738-AC4D-0F7BB9B45BF6}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Indexed Execute" symbol="dataseg_indexed_execute" hidden="true" guid="{71159029-74CA-4BDD-8DD2-E684FF301648}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Indexed Execute" symbol="other_indexed_execute" hidden="true" guid="{767AE0B6-545C-476A-9000-66C3825D7468}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>
      </Flaw>
    </Flaw>

    <Flaw name="Memory Corruption" symbol="memory_corruption" guid="{87EDF4D6-508C-4423-AA17-234BA225100F}">
      <HasProperty>BaseRegion</HasProperty>
      <HasProperty>Direction</HasProperty>
      <HasProperty>AddressingMode</HasProperty>
      
      <LeadsToViolation target="w"/>
      
      <Flaw name="Arbitrary Write" symbol="arbitrary_write" guid="{0359A4D1-CA67-423B-84C1-46AB5FFFA904}">
        <Example>
          <![CDATA[
        
            type *p = unsafe;
          
            *p = value;
        
          ]]>
        </Example>

        <AddressingMode>Absolute</AddressingMode>
      </Flaw>

      <Flaw name="Null Dereference" symbol="null_dereference" guid="{353F9220-BB75-4F4F-9C23-E2A36C7687DA}">
        <AddressingMode>Relative</AddressingMode>
        <ControlledParameter name="base">false</ControlledParameter>
        <BaseRegion>Null</BaseRegion>
        
        <Flaw name="Write Near Null" symbol="write_near_null" guid="{F954417C-C775-4ED4-9D21-C6DF367AC59C}">
          <Example>
            <![CDATA[
        
            type *p = NULL;
          
            p->field = value;
        
          ]]>
          </Example>

        </Flaw>
      </Flaw>

      <Flaw name="Boundary Violation" symbol="boundary_violation" guid="{A69DE8E5-7F17-48EE-A69C-95ACA66612EC}">
        <HasProperty>Displacement</HasProperty>

        <AddressingMode>Relative</AddressingMode>
        
        <Flaw name="Buffer Overrun" symbol="buffer_overrun" guid="{6290D7B6-9460-4FDA-8214-2815AB2398CD}">
          <Example>
            <![CDATA[
        
            type p[MAX];
            int unsafe;
          
            memcpy(p, src, unsafe);
        
          ]]>
          </Example>

          <Flaw name="Stack Buffer Overrun" symbol="stack_buffer_overrun" hidden="true" guid="{830865FC-DE1C-4B33-B55C-52B24D3CFECA}">
            <BaseRegion>Stack</BaseRegion>

            <Flaw name="Forward Adjacent" symbol="forward_adjacent" hidden="true" guid="{998C22D8-4970-4C67-85BB-533E7E2A6487}">
              <Direction>Forward</Direction>
              <Displacement>PostAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="forward_nonadjacent" hidden="true" guid="{C74DA74A-BA15-4B94-AA87-5D04EECDFA5B}">
              <Direction>Forward</Direction>
              <Displacement>PostNonadjacent</Displacement>
            </Flaw>

            <Flaw name="Reverse Adjacent" symbol="reverse_adjacent" hidden="true" guid="{35E67FAF-08F5-483A-88EB-C799BDD70E57}">
              <Direction>Reverse</Direction>
              <Displacement>PreAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="reverse_nonadjacent" hidden="true" guid="{E84EFAF8-BE71-4F2A-93FF-140EC5DB5B05}">
              <Direction>Reverse</Direction>
              <Displacement>PreNonadjacent</Displacement>
            </Flaw>
            
          </Flaw>
          
          <Flaw name="Heap Buffer Overrun" symbol="heap_buffer_overrun" hidden="true" guid="{DAD6D45C-2BAA-4DAF-B32E-A175ED40413F}">
            <BaseRegion>Heap</BaseRegion>

            <Flaw name="Forward Adjacent" symbol="forward_adjacent" hidden="true" guid="{11B28F32-D309-484C-94BE-254A4E3629C6}">
              <Direction>Forward</Direction>
              <Displacement>PostAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="forward_nonadjacent" hidden="true" guid="{280F5106-FC3F-4678-893D-B5F1C89F8BFD}">
              <Direction>Forward</Direction>
              <Displacement>PostNonadjacent</Displacement>
            </Flaw>

            <Flaw name="Reverse Adjacent" symbol="reverse_adjacent" hidden="true" guid="{FA524002-E224-450A-B28C-16022B46911D}">
              <Direction>Reverse</Direction>
              <Displacement>PreAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="reverse_nonadjacent" hidden="true" guid="{12293A80-83D8-40CD-BA2D-AEED98FE2C7F}">
              <Direction>Reverse</Direction>
              <Displacement>PreNonadjacent</Displacement>
            </Flaw>
          </Flaw>
          
          <Flaw name="Data Segment Buffer Overrun" symbol="dataseg_buffer_overrun" hidden="true" guid="{36FA9A09-FBF1-4BA3-A84B-12AD308EEB5E}">
            <BaseRegion>Dataseg</BaseRegion>

            <Flaw name="Forward Adjacent" symbol="forward_adjacent" hidden="true" guid="{37FE56E9-F6CE-48D3-874A-CA73D029A9C9}">
              <Direction>Forward</Direction>
              <Displacement>PostAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="forward_nonadjacent" hidden="true" guid="{7D1FC886-9202-43E0-9D6A-49EA980B488C}">
              <Direction>Forward</Direction>
              <Displacement>PostNonadjacent</Displacement>
            </Flaw>

            <Flaw name="Reverse Adjacent" symbol="reverse_adjacent" hidden="true" guid="{A56176A2-31CA-4389-B9F2-517804313D4B}">
              <Direction>Reverse</Direction>
              <Displacement>PreAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="reverse_nonadjacent" hidden="true" guid="{D5885256-8EAF-455D-BE09-A3174DA1E6B7}">
              <Direction>Reverse</Direction>
              <Displacement>PreNonadjacent</Displacement>
            </Flaw>
          </Flaw>
          
          <Flaw name="Other Buffer Overrun" symbol="other_buffer_overrun" hidden="true" guid="{4A9E87D2-4AB5-462D-B492-2AEBE09A26F5}">
            <BaseRegion>Other</BaseRegion>

            <Flaw name="Forward Adjacent" symbol="forward_adjacent" hidden="true" guid="{11FE1509-4BB3-467D-8F2D-22EEAB805B61}">
              <Direction>Forward</Direction>
              <Displacement>PostAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="forward_nonadjacent" hidden="true" guid="{A5BE65D5-61AC-4657-ADCD-0DCFFE75E31E}">
              <Direction>Forward</Direction>
              <Displacement>PostNonadjacent</Displacement>
            </Flaw>

            <Flaw name="Reverse Adjacent" symbol="reverse_adjacent" hidden="true" guid="{FD6FEE81-A04F-4377-9922-2CF73A16F8CB}">
              <Direction>Reverse</Direction>
              <Displacement>PreAdjacent</Displacement>
            </Flaw>

            <Flaw name="Forward Nonadjacent" symbol="reverse_nonadjacent" hidden="true" guid="{9C376399-0B15-4F74-AA7E-288F49813FB6}">
              <Direction>Reverse</Direction>
              <Displacement>PreNonadjacent</Displacement>
            </Flaw>
          </Flaw>
        </Flaw>

        <Flaw name="Indexed Write" symbol="indexed_write" guid="{E5C8401B-4E05-41E4-A2CE-1A64D67D811B}">
          <Example>
            <![CDATA[
        
            type *p;
            int unsafe;
          
            p[unsafe] = value;
        
          ]]>
          </Example>

          <Flaw name="Stack Indexed Write" symbol="stack_indexed_write" hidden="true" guid="{0B450267-AC89-4D07-809B-85867BB33CC1}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Indexed Write" symbol="heap_indexed_write" hidden="true" guid="{DB0B1FDD-7D79-4E5F-9B86-07032E862E7A}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Indexed Write" symbol="dataseg_indexed_write" hidden="true" guid="{41CDD9EA-EB81-4280-8C5D-77DFB35F8398}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Indexed Write" symbol="other_indexed_write" hidden="true" guid="{922A27CC-68EA-4626-8BE6-B924DA5EE5A0}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>

        <Flaw name="Pointer Arithmetic Write" symbol="pointer_arithmetic_write" guid="{879589C1-E859-4EFA-9DF5-A495EB964973}">
          <Example>
            <![CDATA[
        
            type *p;
            int unsafe;
          
            p += unsafe;
          
            *p = value;
        
          ]]>
          </Example>

          <Flaw name="Stack Pointer Arithmetic Write" symbol="stack_ptr_arithmetic_write" hidden="true" guid="{DA3AEC09-303B-448C-AA39-0664A890BA6B}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Pointer Arithmetic Write" symbol="heap_ptr_arithmetic_write" hidden="true" guid="{DE011862-18EF-4C88-9938-D8826B8A1659}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Pointer Arithmetic Write" symbol="dataseg_ptr_arithmetic_write" hidden="true" guid="{CDA5B77E-50C7-439E-AD0C-6D54FA59B927}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Pointer Arithmetic Write" symbol="other_ptr_arithmetic_write" hidden="true" guid="{1575C86A-5BCC-4EDC-83D0-9DD8FD1AF180}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>

      </Flaw>

      <Flaw name="Type State Violation" symbol="type_state_violation" guid="{E016DA42-5479-48E9-AC6A-A739AC2393C3}">
        <Flaw name="Object State Corruption" symbol="object_state_corruption" guid="{D2801029-11B2-4827-8725-5F12DA8DDECF}">
          <Example>
            <![CDATA[
        
            type *p = new type();
                    
            p->field = unsafe;
        
          ]]>
          </Example>

          <AddressingMode>Relative</AddressingMode>

          <Flaw name="Stack Object State Corruption" symbol="stack_object_state_corruption" hidden="true" guid="{265E6641-86C8-43B4-8C16-FE8E758B1D87}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Object State Corruption" symbol="heap_object_state_corruption" hidden="true" guid="{BD55DE76-6D57-4DD7-ABDD-5E5467FEE3DA}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Object State Corruption" symbol="dataseg_object_state_corruption" hidden="true" guid="{0167101F-ACC8-4ADF-85B1-A188726E0B6D}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Object State Corruption" symbol="other_object_state_corruption" hidden="true" guid="{3F07C693-8759-4790-ADFD-5EDE3E266B28}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>

      </Flaw>
    </Flaw>

    <Flaw name="Memory Management" symbol="memory_management" guid="{55C73BF0-1620-48A7-9CCB-A8AB26847A54}">
      <Flaw name="Bad Allocation Size" symbol="bad_allocation_size" guid="{570392D9-F7C2-4726-8916-42FD8D6BEB74}">
        <LeadsToFlaw>boundary_violation</LeadsToFlaw>

        <Flaw name="Attacker Controlled Allocation Size" symbol="attacker_controlled_allocation_size" guid="{F1902830-8C09-4AF2-92E7-D3BF800D33AF}">
          <Flaw name="Zero-sized Allocation" symbol="zero_sized_allocation" guid="{CA090410-6027-49D3-8B93-5E8AE01DBC2D}"/>
        </Flaw>
        <Flaw name="Fixed Buffer Size" symbol="fixed_buffer_size" guid="{FF802B21-1C0C-447F-B50E-A47AFA1ABAE0}"/>
        <Flaw name="Assumed Minimum Size" symbol="assumed_minimum_size" guid="{4FF5850B-9CAB-44C6-8A3A-B8A7DAF28D9C}"/>
      </Flaw>
    </Flaw>

    <Flaw name="Memory Read" symbol="memory_read" guid="{9F7ECBDF-1505-4825-9A3F-2C3073CD0D11}">
      <HasProperty>BaseRegion</HasProperty>
      <HasProperty>Direction</HasProperty>
      <HasProperty>AddressingMode</HasProperty>
      
      <LeadsToViolation target="r"/>

      <Flaw name="Arbitrary Read" symbol="arbitrary_read" guid="{75ED3EE9-6552-4817-BB78-817361C090EE}">
        <Example>
          <![CDATA[
        
            type *p = unsafe;
          
            secret = *p;
        
          ]]>
        </Example>

        <AddressingMode>Absolute</AddressingMode>

      </Flaw>

      <Flaw name="Null Dereference" symbol="null_dereference" guid="{26418D36-ACB8-46E5-B43E-C7322762E206}">
        <AddressingMode>Relative</AddressingMode>
        <ControlledParameter name="base">false</ControlledParameter>
        <BaseRegion>Null</BaseRegion>
        
        <Flaw name="Read Near Null" symbol="read_near_null" guid="{D8149CDF-DBF9-46C2-A5E2-032EBAAC5448}">
          <Example>
            <![CDATA[
        
            type *p = NULL;
          
            secret = p->field;
        
          ]]>
          </Example>
          
        </Flaw>
      </Flaw>

      <Flaw name="Boundary Violation" symbol="boundary_violation" guid="{F84694CC-DD97-4B55-B555-7AD68574EC0E}">
        <HasProperty>Displacement</HasProperty>
        
        <ViolationType>Relative</ViolationType>
        
        <Flaw name="Buffer Overread" symbol="buffer_overread" guid="{938E0736-BC48-4A55-88F1-9A1B9F6DF59A}">
          <Example>
            <![CDATA[
        
            type secret[MAX];
            int unsafe;
          
            memcpy(p, secret, unsafe);
        
          ]]>
          </Example>

          <Flaw name="Stack Buffer Overread" symbol="stack_buffer_overread" hidden="true" guid="{9E80D43E-C2D3-4024-A2F5-4958FF0D312B}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Buffer Overread" symbol="heap_buffer_overread" hidden="true" guid="{CA2F76EE-DECF-4143-A390-92A005182126}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Buffer Overread" symbol="dataseg_buffer_overread" hidden="true" guid="{4EE2475F-912E-4AC1-B3D6-B115CA16BD3D}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Buffer Overread" symbol="other_buffer_overread" hidden="true" guid="{1166B89D-33A9-467F-9ACB-D7799FF85657}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>

        <Flaw name="Indexed Read" symbol="indexed_read" guid="{C1052E92-8127-4127-BC15-7EDFC8D55A67}">
          <Example>
            <![CDATA[
        
            type *p;
            int unsafe;
          
            secret = p[unsafe];
        
          ]]>
          </Example>

          <Flaw name="Stack Indexed Read" symbol="stack_indexed_read" hidden="true" guid="{FBB7A5BC-E651-4EAA-9A1B-74152C12B80A}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Indexed Read" symbol="heap_indexed_read" hidden="true" guid="{15E592F4-758C-425B-AC54-495DB7A9CD7A}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Indexed Read" symbol="dataseg_indexed_read" hidden="true" guid="{6D418DD2-0943-46B6-873E-25BFB32065C9}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Indexed Read" symbol="other_indexed_read" hidden="true" guid="{7A2752C5-17E8-4F32-A86A-E3C6A7C038F9}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>

        <Flaw name="Pointer Arithmetic Read" symbol="pointer_arithmetic_read" guid="{23024884-F95B-4018-800C-767D96D07E15}">
          <Example>
            <![CDATA[
        
            type *p;
            int unsafe;
          
            p += unsafe;
          
            secret = *p;
        
          ]]>
          </Example>

          <Flaw name="Stack Pointer Arithmetic Read" symbol="stack_ptr_arithmetic_read" hidden="true" guid="{580029DD-8484-43CA-9A62-493265E136BC}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Pointer Arithmetic Read" symbol="heap_ptr_arithmetic_read" hidden="true" guid="{2BE8C1EC-29D3-45B7-A847-AD0E69521896}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Pointer Arithmetic Read" symbol="dataseg_ptr_arithmetic_read" hidden="true" guid="{6CD0A5CE-E327-4329-841C-7118E89C1E4B}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Pointer Arithmetic Read" symbol="other_ptr_arithmetic_read" hidden="true" guid="{B1CDA1CC-6991-46B7-B6D7-DE40A4BB61C5}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>


      </Flaw>

      <Flaw name="Type State Violation" symbol="type_state_violation" guid="{F2754953-49E7-437D-9F68-E268A1D1465A}">

        <Flaw name="Object State Disclosure" symbol="object_state_disclosure" guid="{DF9F9200-7F28-424B-B367-48877EA121AF}">
          <Example>
            <![CDATA[
        
            type *p = new type();
                    
            secret = p->field;
        
          ]]>
          </Example>
          
          <AddressingMode>Relative</AddressingMode>

          <Flaw name="Stack Object State Disclosure" symbol="stack_object_state_disclosure" hidden="true" guid="{1CB57FA6-7888-4AD7-A156-1468F1D8CF52}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Heap Object State Disclosure" symbol="heap_object_state_disclosure" hidden="true" guid="{4AD824FC-9F00-4DAA-8AD4-AF107A92B896}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Data Segment Object State Disclosure" symbol="dataseg_object_state_disclosure" hidden="true" guid="{E01C3654-6B02-4442-A300-6DC1C3FD2372}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Other Object State Disclosure" symbol="other_object_state_disclosure" hidden="true" guid="{FE655A4E-7E35-409D-97F9-5FE222A9711E}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>
      </Flaw>

      <Flaw name="Format String Violation" symbol="format_string_violation" guid="{5D2980A2-53C0-4B04-A602-A0DA8CBA008F}">
        <Flaw name="Controlled Format String" symbol="controlled_format_string" guid="{069F339C-0D17-410B-BAC7-32B8CC427103}">
          <Example>
            <![CDATA[
        
            sprintf(buf, unsafe, ...);
        
          ]]>
          </Example>
        </Flaw>
      </Flaw>
    </Flaw>

    <Flaw name="Object Lifetime" symbol="object_lifetime" guid="{8FE78C16-C710-4ED4-8738-54F8B219A670}">
      <Flaw name="Type State Violation" symbol="type_state_violation" guid="{B6876666-8AE6-4BFD-8C23-69FEB15186E5}">

        <Flaw name="Incomplete Cleanup" symbol="incomplete_cleanup" guid="{7CEE3191-62D7-4073-8767-1A2AD36A42E2}">
          <Example>
            <![CDATA[
        
                type *p = new type();
            
                delete p;
            
                ... // failure to set p to NULL
            
                if (p != NULL) {
                  p->method();
                }
        
              ]]>
          </Example>

          <LeadsToFlaw>use_after_free</LeadsToFlaw>
          <LeadsToFlaw>double_free</LeadsToFlaw>
        </Flaw>

        <Flaw name="Unbalanced Reference Count" symbol="unbalanced_reference_count" guid="{7B439C0F-DFB1-4FD1-9102-9824CD57946D}">
          <Example>
            <![CDATA[
        
                type *p = new type();
            
                p->AddRef();
                
                ...
                
                p->Release();
                
                ...
                
                p->Release(); // unbalance ref count decrement
                 
                ...
                
                p->method();  // use after free
        
              ]]>
          </Example>

          <LeadsToFlaw>use_after_free</LeadsToFlaw>
          <LeadsToFlaw>double_free</LeadsToFlaw>
        </Flaw>
        
        <Flaw name="Premature Free" symbol="premature_free" guid="{6F333B8F-FC34-45DA-A76A-FA63F912701B}">
          <LeadsToFlaw>object_state_corruption</LeadsToFlaw>
          <LeadsToFlaw>object_state_disclosure</LeadsToFlaw>

          <Flaw name="Double Free" symbol="double_free" guid="{C23024EA-3127-45E6-9755-7FD84011289C}">
            <Example>
              <![CDATA[
        
              type *p = new type();
            
              delete p;
            
              ...
            
              delete p;
        
            ]]>
            </Example>
          </Flaw>

          <Flaw name="Arbitrary Free" symbol="arbitrary_free" guid="{6D049097-FC7E-4A62-B59D-BE81FB7E76F7}">
            <Example>
              <![CDATA[
        
              type *p = unsafe;
            
              delete p;
        
            ]]>
            </Example>
          </Flaw>

          <Flaw name="Use After Free" symbol="use_after_free" guid="{02E49572-593C-4073-85AA-48BD36DDB542}">
            <Example>
              <![CDATA[
        
              type *p = new type();
            
              delete p;
            
              ...
            
              p->method();
        
            ]]>
            </Example>

            <HasProperty>BaseRegion</HasProperty>

            <Flaw name="Stack Use After Free" symbol="stack_use_after_free" hidden="true" guid="{B58BA09B-686D-4968-A896-A16BFE65E71D}">
              <BaseRegion>Stack</BaseRegion>
            </Flaw>
            <Flaw name="Heap Use After Free" symbol="heap_use_after_free" hidden="true" guid="{C5980D52-9286-496D-AD18-733CAC1D6E30}">
              <BaseRegion>Heap</BaseRegion>
            </Flaw>
          </Flaw>
        </Flaw>

        <Flaw name="Live Object Reallocation" symbol="live_object_reallocation" guid="{233F8989-BEFD-4CFF-98D5-AE5476966CB0}">
          <Example>
            <![CDATA[
        
              type *p1 = alloc();
              type *p2 = alloc();
            
              assert(p2 == p1);
        
            ]]>
          </Example>

          <LeadsToFlaw>object_state_corruption</LeadsToFlaw>
          <LeadsToFlaw>object_state_disclosure</LeadsToFlaw>
        </Flaw>
      </Flaw>
    </Flaw>

    <Flaw name="Type Confusion" symbol="type_confusion" guid="{A81B278F-2B0A-49F6-9CB0-6A993E257C52}">
      <Flaw name="Type State Violation" symbol="type_state_violation" guid="{E6F2C9BF-2DDE-4302-A2AF-3780A5F9A18C}">
        <Flaw name="Invalid Inheritance" symbol="invalid_inheritance" guid="{B7F87F16-EBB5-4DE2-AD93-9B0143A93584}">
          <LeadsToFlaw>any</LeadsToFlaw>
        </Flaw>
        <Flaw name="Invalid Cast" symbol="invalid_cast" guid="{D2FA6B45-9AB1-4A73-A5ED-970E9BB69DE8}">
          <Example>
            <![CDATA[
        
              invalid_type *p = (invalid_type *)not_of_type_p;
            
              p->field = value;
        
            ]]>
          </Example>

          <LeadsToFlaw>any</LeadsToFlaw>
        </Flaw>
        <Flaw name="Invalid Unioned Field Access" symbol="invalid_unioned_field_access" guid="{355A9995-F976-44D4-8FC9-1D7E6E06B6D7}">
          <Example>
            <![CDATA[
        
              union type {
                char *p;
                int v;
              };
            
              union type t;
            
              t.v = 1;
            
              // t.p is not valid for the current type state.
            
              value = *t.p;
                    
            ]]>
          </Example>

          <LeadsToFlaw>any</LeadsToFlaw>
        </Flaw>
      </Flaw>
    </Flaw>

    <Flaw name="Uninitialized Use" symbol="uninitialized_use" guid="{8B44EB09-4AE2-48A6-B34F-999D8310D1CD}">
      <Flaw name="Type State Violation" symbol="type_state_violation" guid="{B476C207-14A8-40A0-A1A7-EA7B918BD05F}">
        <Flaw name="Uninitialized Variable Use" symbol="uninitialized_variable_use" guid="{4CCE988C-CB61-48FD-BAEC-AF6C354303EF}">
          <Example>
            <![CDATA[
        
              type *p;
            
              ...
            
              p->field = value;
        
            ]]>
          </Example>

          <HasProperty>BaseRegion</HasProperty>

          <LeadsToFlaw>any</LeadsToFlaw>

          <Flaw name="Uninitialized Stack Variable Use" symbol="uninitialized_stack_variable_use" hidden="true" guid="{8325C46C-A3B0-4681-A8DF-E3DC85B9E64D}">
            <BaseRegion>Stack</BaseRegion>
          </Flaw>
          <Flaw name="Uninitialized Heap Variable Use" symbol="uninitialized_heap_variable_use" hidden="true" guid="{A8AE2529-F5D2-4467-833F-32EBE5779248}">
            <BaseRegion>Heap</BaseRegion>
          </Flaw>
          <Flaw name="Uninitialized Data Segment Variable Use" symbol="uninitialized_dataseg_variable_use" hidden="true" guid="{720D6B02-3ADD-4A91-8822-D065331DF4DB}">
            <BaseRegion>Dataseg</BaseRegion>
          </Flaw>
          <Flaw name="Uninitialized Other Variable Use" symbol="uninitialized_other_variable_use" hidden="true" guid="{A2CAB726-B388-4A83-AA88-4FBC5A4B76D0}">
            <BaseRegion>Other</BaseRegion>
          </Flaw>
        </Flaw>
        <Flaw name="Partially Initialized VARIANT" symbol="partially_initialized_variant" guid="{70D0DC94-C4A9-4E7A-A59E-444726C3CA71}">
          <LeadsToFlaw>any</LeadsToFlaw>
        </Flaw>
      </Flaw>
    </Flaw>
  </Flaw>

  <Flaw name="Race Condition" symbol="race_condition" guid="{36DDAFD0-E977-4980-88F2-1412644B8405}">
    <HasProperty>Locality</HasProperty>
    <HasProperty>ExecutionDomain</HasProperty>
    <HasProperty>AccessRequirement</HasProperty>
    
    <LeadsToFlaw>any</LeadsToFlaw>
  </Flaw>

  <Flaw name="Flawed Validation" symbol="flawed_validation" guid="{2E2E8536-8BD1-4A93-ABF3-C090AE72CAF9}">
    <HasProperty>Locality</HasProperty>
    <HasProperty>ExecutionDomain</HasProperty>
    <HasProperty>AccessRequirement</HasProperty>

    <Flaw name="No validation" symbol="no_validation" guid="{62A7A33D-E587-4393-898C-F7DD26F5D4CF}">
      <LeadsToFlaw>any</LeadsToFlaw>      
    </Flaw>
    <Flaw name="Incomplete validation" symbol="incomplete_validation" guid="{DB234784-AF55-4B80-BD6F-BA2AEBF58296}">
      <LeadsToFlaw>any</LeadsToFlaw>      
    </Flaw>
    <Flaw name="Incorrect validation" symbol="incorrect_validation" guid="{1C4299F6-0E43-4E99-A80F-55651BA46A23}">
      <LeadsToFlaw>any</LeadsToFlaw>
    </Flaw>

    <Flaw name="Invalid probe size" symbol="invalid_probe_size" guid="{9424B890-6E5F-472C-868F-D07F827009A6}">
      <Flaw name="Zero size probe" symbol="probe_for_zero" guid="{2004AA54-22C1-4098-B459-5E8BFC0FDDB2}"/>
    </Flaw>
    
    <Flaw name="Incorrect directory or file path validation" symbol="incorrect_directory_or_file_path_validation" guid="{07B39505-8068-404A-8A94-6A37D9A24050}"/>
    <Flaw name="Command injection" symbol="command_injection" guid="{E31098F5-8321-4AA0-ABD7-BCFF09B94B1E}"/>
    <Flaw name="Cross site scripting" symbol="cross_site_scripting" guid="{D171E28F-56C4-42CB-B476-6F3534449F54}"/>
    <Flaw name="SQL injection" symbol="sql_injection" guid="{C8C27CF5-DEF5-4BCB-8075-06A8E036C5B0}"/>
  </Flaw>
  
  <Flaw name="Arithmetic Error" symbol="arithmetic_error" guid="{CAD87728-1BB6-42FE-B170-31CBC6D58ACE}">
    <HasProperty>Locality</HasProperty>
    <HasProperty>ExecutionDomain</HasProperty>
    <HasProperty>AccessRequirement</HasProperty>
    
    <Flaw name="Offset Calculation" symbol="offset_calculation" guid="{370B6ECD-9122-44BD-915E-E2F5E7B6433E}">
      <Example>
        <![CDATA[
        
              type p[MAX];
            
              p[safe + unsafe] = value;
        
            ]]>
      </Example>

      <LeadsToFlaw>indexed_read</LeadsToFlaw>
      <LeadsToFlaw>indexed_write</LeadsToFlaw>
      <LeadsToFlaw>pointer_arithmetic_read</LeadsToFlaw>
      <LeadsToFlaw>pointer_arithmetic_write</LeadsToFlaw>

      <Flaw name="Integer Wrap" symbol="integer_wrap" guid="{A9135B35-2861-4F51-9756-A5E29F4FE93E}">
        <Flaw name="Underflow" symbol="underflow" guid="{B54F5679-0F95-4A8A-9CB2-2A704C4BE02F}"/>
        <Flaw name="Overflow" symbol="overflow" guid="{7F94951B-2851-4AA9-A02E-96405BDD0F4C}"/>
      </Flaw>
      <Flaw name="Integer Truncation" symbol="integer_truncation" guid="{CCC0DD44-AA62-48EF-B694-7D4DAE6D3378}"/>
      <Flaw name="Sign Extension" symbol="sign_extension" guid="{E755A0AD-E354-493F-B4B3-CFE1B072B101}"/>
    </Flaw>

    <Flaw name="Size Calculation" symbol="size_calculation" guid="{B386C473-3346-41F4-A32D-D2F4B88318E8}">
      <Example>
        <![CDATA[
        
              type *p = alloc(safe * unsafe);
            
              p[unsafe] = value;
        
            ]]>
      </Example>

      <LeadsToFlaw>boundary_violation</LeadsToFlaw>

      <Flaw name="Integer Wrap" symbol="integer_wrap" guid="{BDDA044C-EFC6-4DA1-AB20-CB301776D3C7}">
        <Flaw name="Underflow" symbol="underflow" guid="{537E907C-8567-42DA-BEC7-8F9F3B9FC561}"/>
        <Flaw name="Overflow" symbol="overflow" guid="{5291F623-29D5-45D9-991C-6E0D8A5CA5B7}"/>
      </Flaw>
      <Flaw name="Integer Truncation" symbol="integer_truncation" guid="{472B0CF8-90D7-4D42-AB62-E764AAFE59C5}"/>
      <Flaw name="Sign Extension" symbol="sign_extension" guid="{BC362794-6F8A-4FE9-80DB-94BE9861ABA5}"/>
    </Flaw>

    <Flaw name="Incorrect Constraint" symbol="improper_constraint" guid="{EF48594E-DFC3-46B1-9545-8786353F2FD1}">
      <Example>
        <![CDATA[
        
              if (safe + unsafe < 100) {
                ... secondary flaw ...
              }
        
            ]]>
      </Example>

      <LeadsToFlaw>any</LeadsToFlaw>

      <Flaw name="Integer Wrap" symbol="integer_wrap" guid="{C71212B7-05CD-4A93-8702-5455CF7AEB4C}">
        <Flaw name="Underflow" symbol="underflow" guid="{D6C50630-2B4B-4321-A18E-BFECD7BC48CF}"/>
        <Flaw name="Overflow" symbol="overflow" guid="{83DBC4DA-0744-4AF4-9E94-7703AB2499F0}"/>
      </Flaw>
      <Flaw name="Integer Truncation" symbol="integer_truncation" guid="{3667AEAF-DBD5-4423-82C9-FEBA6DB1A4E3}"/>
      <Flaw name="Sign Extension" symbol="sign_extension" guid="{9FF21B5A-8D7D-448C-9047-67217F954E72}"/>
    </Flaw>
  </Flaw>

  <Flaw name="Cryptography" symbol="cryptography" guid="{8BEF3075-DD01-4E62-B69A-49DE2DDB5960}"/>

  <Flaw name="Logic" symbol="logic">
    <Flaw name="DLL Planting" symbol="dll_planting" guid="{F6EDF95F-05E1-4791-8594-AD5EC6F39151}"/>
  </Flaw>

  <Flaw name="Access Control" symbol="access_control" guid="{3A6B9067-BB62-4745-B51F-692F4FF4BD6E}">
    <Flaw name="Same Origin Violation" symbol="same_origin_violation" guid="{D324FECC-2AB0-4379-8F29-1593CBE0E4D6}"/>
    <Flaw name="Incorrect ACL" symbol="incorrect_acl" guid="{408962AE-155B-4919-A919-39D856A78AD8}"/>
  </Flaw>

  <Flaw name="Unknown" symbol="unknown" guid="{EB4C4511-290E-4DB2-BD65-62AA6A5B2DDE}">
    <Flaw name="Revisit" symbol="revisit" guid="{5D62EF93-4741-4C6F-A502-F1D87640EFB6}">
      <Flaw name="DoS" symbol="dos" guid="{D1ADC93D-DE29-424E-94B0-370B4D45D489}"/>
    </Flaw>
  </Flaw>

</Flaws>