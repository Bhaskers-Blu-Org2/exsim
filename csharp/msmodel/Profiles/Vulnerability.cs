// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.IO;
using System.ComponentModel;

namespace MSModel
{
    public class Vulnerability : Profile
    {
        public Vulnerability()
        {
            this.RootFlaws = new List<Flaw>();
            this.RootViolations = new List<Violation>();
        }

        [
         XmlElement("CVE"),
         Category("General")
        ]
        public string CVE { get; set; }

        [
         XmlElement("Bulletin"),
         Category("General")
        ]
        public string Bulletin { get; set; }

        [
         XmlElement("MSRC"),
         Category("General")
        ]
        public int? MSRC { get; set; }

        [
         XmlElement("ExploitabilityIndexOldest"),
         ReadOnly(true),
         Category("General")
        ]
        public int? ExploitabilityIndexOldest { get; set; }

        [
         XmlElement("ExploitabilityIndexNewest"),
         ReadOnly(true),
         Category("General")
        ]
        public int? ExploitabilityIndexNewest { get; set; }

        [
         XmlElement("DisclosureDate"),
         ReadOnly(true),
         Category("General")
        ]
        public DateTime? DisclosureDate { get; set; }

        [
         XmlElement("PatchReleaseDate"),
         ReadOnly(true),
         Category("General")
        ]
        public DateTime? PatchReleaseDate { get; set; }

        [
         XmlElement("ReportURL"),
         ReadOnly(true),
         Category("General")
        ]
        public string ReportURL { get; set; }

        [
         XmlElement("MemorySafety"),
         Category("General")
        ]
        public bool? MemorySafety { get; set; }

        [
         Browsable(false),
         XmlArray("Flaws"),
         XmlArrayItem("Flaw"),
         ReadOnly(true),
         Category("General")
        ]
        public List<Flaw> RootFlaws { get; set; }

        [
         Browsable(false),
         XmlArray("Violations"),
         XmlArrayItem("Violation"),
         ReadOnly(true),
         Category("General")
        ]
        public List<Violation> RootViolations { get; set; }

        #region Vector properties
        [
         ProfileProperty,
         Category("Vector"),
         Description("The location the vulnerability can be triggered from."),
         XmlElement
        ]
        public Locality? Locality
        {
            get { return this.locality; }
            set { this.locality = value; }
        }
        private Locality? locality = MSModel.Locality.Unspecified;

        [
         ProfileProperty,
         Category("Vector"),
         Description("The minimum level of access required for the vulnerability to be triggered."),
         XmlElement
        ]
        public AccessRequirement? AccessRequirement
        {
            get { return this.accessRequirement; }
            set { this.accessRequirement = value; }
        }
        private AccessRequirement? accessRequirement = MSModel.AccessRequirement.Unspecified;

        [
         ProfileProperty,
         Category("Vector"),
         Description("The processor execution domain in which the vulnerability is triggered."),
         XmlElement
        ]
        public ExecutionDomain? ExecutionDomain
        {
            get { return this.executionDomain; }
            set { this.executionDomain = value; }
        }
        private ExecutionDomain? executionDomain = MSModel.ExecutionDomain.Unspecified;
        #endregion

        [XmlIgnore]
        public override ModelType ModelType
        {
            get { return MSModel.ModelType.Vulnerability; }
        }

        [XmlIgnore]
        public override IEnumerable<Profile> Children
        {
            get { yield break; }
        }

        public static Vulnerability LoadFromFile(string path)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Vulnerability));

            using (StreamReader reader = new StreamReader(path))
            {
                return serializer.Deserialize(reader) as Vulnerability;
            }
        }

        public static Vulnerability LoadFromString(string xmlString)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Vulnerability));

            using (StringReader reader = new StringReader(xmlString))
            {
                return serializer.Deserialize(reader) as Vulnerability;
            }
        }

        public void SaveToFile(string path)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Vulnerability));

            using (StreamWriter writer = new StreamWriter(path))
            {
                XmlTextWriter textWriter = new XmlTextWriter(writer);

                textWriter.Formatting = Formatting.Indented;

                serializer.Serialize(textWriter, this);
            }
        }

        public string ToXmlString()
        {
            XmlSerializer serializer = new XmlSerializer(typeof(Vulnerability));

            using (StringWriter writer = new StringWriter())
            {
                XmlTextWriter textWriter = new XmlTextWriter(writer);

                textWriter.Formatting = Formatting.Indented;

                serializer.Serialize(textWriter, this);

                return writer.ToString();
            }
        }
    }
}
